#!/bin/bash

showhelp() {
cat <<HELP_MESSAGE_TEXT
GPIO - a utility application for Linux's /sys/class/gpio interface

Usage:
  gpio GPIO_NUM [ACTION] [ARG1 [ARG2] ...]
  
  Warning: GPIO_NUM is the kernel's gpio numbering which (most likely) does not
  directly coincide with the pin headers on your microcontroller.
  For example, on the Raspberry Pi pin 26 is gpio 7. The GPIO_NUM is 7

Example:

  gpio help
  gpio 7 reserve "For switching on the LED"
  gpio 7 export 5
  gpio 7 high # sets direction as "out" and value as "1"


Actions:

  help
    Show the help message (this one that you're reading). Default if you do not
    give a gpio (which is invalid usage; port number is required).

  status
    Reads the reserve if it exists, direction and value. This is the default if
    you give a gpio but do not give an action.

  reserve DESCRIPTION
    Reserves the gpio for some specific usage with a description. Does not
    directly limit the gpio from being exported, but status can be checked with
    "status" or "reserved?" actions.
  
  reserved?
    Checks if the gpio is reserved. Returns 1 if there is a reserve or 0 if not

  reservation
    Outputs the description text given when reserving

  release
    Removes the reserve

  export [WAIT_SECONDS]
    Exports the gpio (makes it usable).
    
    WAIT_SECONDS is the number of seconds to wait for the gpio to fully export
    The script will block up to that many of seconds for the gpio to open, but
    if the gpio doesn't open after that many seconds, the script will still exit
    Default is 0 which means return right after export.

  unexport [WAIT_SECONDS]
    Unexports the gpio (closes it)
    
    WAIT_SECONDS is the number of seconds to wait for the gpio to full unexport
    The script will block up to that many seconds for the gpio to open, but if
    the gpio doesn't open after that many seconds, the script will still exit.
    Default is 0 which means return right after unexport.

  allocate DIRECTION [WAIT_SECONDS] DESCRIPTION
    Shortcut for reserve + export + direction
    Allocates the GPIO with a reserve and direction.
  
  direction DIRECTION
    Set direction to DIRECTION. Valid values are defined by your gpio module
    On the mainline kernel's version valid values are: in out high low
    
    It returns the new direction, but not necessarily the same direction you set
    eg: it'll only say "out" even if you set it "high" or "low"
    
    Warning: Results are undefined for invalid values
  
  direction?
    Get the direction of the gpio. Generally only "in" or "out"

  read (alias: value)
    Reads the value of the gpio
  
  write VALUE (alias: set)
    Writes the value to the gpio. Only works if the gpio is set to output
    
    Warning: Results are undefined if gpio is set as input
  
  in
    Set gpio direction to input. Shortcut for "direction in"
  
  high
    Set gpio direction to output with value 1. Shortcut for "direction high"
  
  low
    Set gpio direction to output with value 0. Shortcut for "direction low"
  
  out
    Set gpio direction to output. Shortcut for "direction out"
    
    It is recommended to use high/low instead so you know exactly what the
    initial value for the output will be. Default is undefined (maybe random?)
  
  up
    Set the gpio value to 1. Shortcut for "write 1"
  
  down
    Set the gpio value to 0. Shortcut for "write 0"
    
  environment
    Shows the current environment variables pertaining to this app's usage.
    See Environment Variables section for more information.


Environment variables:

  GPIO_DIRECTORY=/tmp/gpio
    By default, the commands write necessary files and locks to /tmp/gpio You'll
    find files like /tmp/gpio/11.reserve This directory can be changed by using
    the GPIO_DIRECTORY environment variable to the new target directory.
    
  GPIO_SYSCLASS_PATH=/sys/class/gpio
    Path to the gpio sys directory with export unexport and gpio port folders
    Generally you shouldn't change this, it's only useful for testing

Notes & Misc & Etc

  Errors are written to STDOUT. Usually when there is an error, it means failure
  
  Required apps in userspace: bash ls echo cat rm expr
  All of which should be part of the default linux installation.

TODO:

  import deport relieve for enforcing the existence of reserves
  up down mid as helpers for exporting gpio and setting direction


Copyright and Licensing

  Copyright in 2015 by User Hello LLC
  
  Licensed under MIT License  

HELP_MESSAGE_TEXT

  return 0
}

# ------- IMPORTANT CODE STARTS HERE ------- #


[[ "$GPIO_DIRECTORY" ]] || GPIO_DIRECTORY="/tmp/gpio"
[[ "$GPIO_SYSCLASS_PATH" ]] || GPIO_SYSCLASS_PATH="/sys/class/gpio"

showenvironment(){
  echo
  echo "GPIO_DIRECTORY='$GPIO_DIRECTORY'"
  echo "GPIO_SYSCLASS_PATH='$GPIO_SYSCLASS_PATH'"
  
  if [[ "$GPIO_NUM" ]]; then
    echo
    echo "GPIO_NUM='$GPIO_NUM'"
    echo "GPIO_PATH='$GPIO_PATH'"
    echo "GPIO_RESERVE_PATH='$GPIO_RESERVE_PATH'"
  fi
  
  echo
}

if [[ $# -lt 1 ]]
then
  showhelp
  exit 1
else
  if [[ "$1" == "help" ]]; then
    showhelp
    exit 0
  fi
  
  if [[ "$1" == "environment" ]]; then
    showenvironment
    exit 0
  fi
fi

# At this point we're sure we have the first argument (the gpio number)


# Some modified kernel gpio modules change the pathname to some weird stuff
# You may need to add some sort of lookup table for this if that's the case.
# TODO: Decide to support those weird ones too or no?
GPIO_PATH="$GPIO_SYSCLASS_PATH/gpio$1"
GPIO_NUM=$1
GPIO_RESERVE_PATH="$GPIO_DIRECTORY/$GPIO_NUM.reserve"


mkdir -p $(dirname "$GPIO_RESERVE_PATH")

error(){
  echo "$1" >&2
}


status(){
  if [[ -e "$GPIO_RESERVE_PATH" ]]
  then
    echo "Reservation: Reserved"
    echo "-- begin reservation description --"
    cat "$GPIO_RESERVE_PATH"
    echo "--  end  reservation description --"
  else
    echo "Reservation: NONE"
  fi

  if [[ -e "$GPIO_PATH" ]]
  then
    echo "Exported: yes"
    echo "Direction: `cat $GPIO_PATH/direction`"
    echo "Value: `cat $GPIO_PATH/value`"
  else
    echo "Exported: no"
    echo "Direction: "
    echo "Value: "
  fi
}

reserve(){
  DESC="$1"
  
  if [[ -e "$GPIO_RESERVE_PATH" ]]
  then
    error "Reserve already exists."
    cat "$GPIO_RESERVE_PATH"
    return 2
  else
    echo "$DESC" > "$GPIO_RESERVE_PATH"
    cat "$GPIO_RESERVE_PATH"
    return 0
  fi
}

check_reserved(){
  if [[ -e "$GPIO_RESERVE_PATH" ]]; then
    echo 1
    return 1
  else
    echo 0
    return 0
  fi
}

reservation(){
  if [[ -e "$GPIO_RESERVE_PATH" ]]; then
    cat "$GPIO_RESERVE_PATH"
    return 0
  else
    error "Not Reserved"
    return 1
  fi
}

release(){
  if [[ -e "$GPIO_RESERVE_PATH" ]]; then
    cat "$GPIO_RESERVE_PATH"
    rm "$GPIO_RESERVE_PATH"
    return 0
  else
    error "Not Reserved"
    return 1
  fi
}

export_gpio(){
  local WAIT=$(($1 + 0))
  # The multiplication is escaped because * is a special character (file glob)
  local TOTAL_TICKS=$(expr $WAIT \* 4)
  local WAIT_TICKS=0
  
  if [[ ! -e "$GPIO_SYSCLASS_PATH/export" ]]; then
    error "GPIO class system folder does not exist"
    return 27
  fi
  
  if [[ -e "$GPIO_PATH" ]]; then
    error "Already Exported"
    return 25
  else
    echo "$GPIO_NUM" > "$GPIO_SYSCLASS_PATH/export"
    local RET=$?
    
    # The WAIT is a little weird since bash doesn't support floating math
    # We divide a second into 4 equal parts (250ms) and then sleep, adding a
    # tick every time we wake until we reach WAIT_TICKS=WAIT*4 or it has exported
    while [ $WAIT_TICKS -lt $TOTAL_TICKS ]; do
      [[ ! -e $GPIO_PATH ]] && sleep 0.250
      let WAIT_TICKS+=1
    done
    
    return $RET
  fi
}


unexport_gpio(){
  local WAIT=$(($1 + 0))
  local TOTAL_TICKS=$(expr $WAIT \* 4)
  local WAIT_TICKS=0
  
  if [[ ! -e "$GPIO_SYSCLASS_PATH/unexport" ]]; then
    error "GPIO class system folder does not exist"
    return 27
  fi
  
  if [[ ! -e "$GPIO_PATH" ]]; then
    error "Not Exported"
    return 30
  else
    echo "$GPIO_NUM" > "$GPIO_SYSCLASS_PATH/unexport"
    local RET=$?
    
    # See export_gpio() for note on WAIT math
    while [ $WAIT_TICKS -lt $TOTAL_TICKS ]; do
      [[ -e $GPIO_PATH ]] && sleep 0.250
      let WAIT_TICKS+=1
    done
    
    return $RET
  fi
}

allocate(){
  local DIRECTION="$1"
  local WAIT=$(($2 + 0))
  local DESCRIPTION="$3"
  
  if [[ -e "$GPIO_PATH" ]]; then
    error "Already Exported"
    return 25
  else
    reserve "$DESCRIPTION" &&
    export_gpio "$WAIT" &&
    direction "$DIRECTION" &&
    status
  fi
}

direction(){
  local NEWDIRECTION="$1"
  
  if [[ ! $NEWDIRECTION ]]; then
    error "No direction given"
    return 24
  fi
  
  if [[ -e "$GPIO_PATH/direction" ]]; then
    echo "$NEWDIRECTION" > "$GPIO_PATH/direction"
    cat "$GPIO_PATH/direction"
  else
    error "Not Exported"
    return 30
  fi
}

get_direction(){
  if [[ -e "$GPIO_PATH/direction" ]]; then
    cat "$GPIO_PATH/direction"
  else
    error "Not Exported"
    return 20
  fi
}

read_gpio(){
  if [[ -e "$GPIO_PATH/value" ]]; then
    cat "$GPIO_PATH/value"
  else
    error "Not Exported"
    return 30
  fi
}

write_gpio(){
  local NEWVAL="$1"
  
  if [[ -e "$GPIO_PATH/value" ]]; then
    echo "$NEWVAL" > "$GPIO_PATH/value"
    cat "$GPIO_PATH/value"
  else
    error "Not Exported"
    return 30
  fi
}


if [[ $# -lt 2 ]]
then
  status
  exit 0
fi

case $2 in
	help)
		showhelp
		;;
	
	status)
	  status
	  ;;
	
	reserve)
	  reserve "$3"
	  ;;
	
	reserved?)
	  check_reserved
	  ;;
	
	reservation)
	  reservation
	  ;;
	
	release)
	  release
	  ;;
	
	export)
	  export_gpio "$3"
	  ;;
	
	unexport)
	  unexport_gpio "$3"
	  ;;
	
	allocate)
	  if [[ $# -eq 4 ]]; then
	    allocate "$3" 0 "$4"
	  else
	    allocate "$3" "$4" "$5"
	  fi
	  ;;
	
	direction)
	  direction "$3"
	  ;;
	
	direction?)
	  get_direction
	  ;;
	
	read|value)
	  read_gpio
	  ;;
	
	write)
	  write_gpio "$3"
	  ;;
	
	in)
	  direction "in"
	  ;;
	
	high)
	  direction "high"
	  ;;
	
	low)
	  direction "low"
	  ;;
	
	out)
	  direction "out"
	  ;;
	
	up)
	  write_gpio "1"
	  ;;
	
	down)
	  write_gpio "0"
	  ;;
	
	environment)
	  showenvironment
	  ;;
		
esac
